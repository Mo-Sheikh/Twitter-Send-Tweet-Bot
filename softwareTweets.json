[
  {
    "tweet": "Beginners will try to find the perfect first language. Your first language doesn’t matter. What matters is learning to program well. Just start coding #100DaysOfCode #coding"
  },
  {
    "tweet": "Learning programming languages is NOT learning how to program. Focus on programming techniques, problem-solving and analytical skills not on learning as many languages as you can. #100DaysOfCode #coding"
  },
  {
    "tweet": "If you're committed to learning a programming language. Learn the most important libraries for your use cases. The more libraries you’re aware of the less likely you are to try reinventing the wheel. #100DaysOfCode #coding"
  },
  {
    "tweet": "Automation is key create some of your own tools. (But of course, if you're going to use it in production make sure it's not another wheel reinvention.) #100DaysOfCode #coding"
  },
  {
    "tweet": "Always write code as if the person who ends up maintaining it will be a violent psychopath who knows where you live. #100DaysOfCode #coding"
  },
  {
    "tweet": "Name variables so that other developers can understand your code better. This is a skill you need to nurture. #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t use design patterns like a hammer looking for a nail. If you don’t have a clear reason you need it don’t use it. #100DaysOfCode #coding"
  },
  {
    "tweet": "Reusable code is helpful and important but trying to write overgeneralised super flexible code is often a waste of time. This kind of code is usually harder to maintain and causes bugs. #100DaysOfCode #coding"
  },
  {
    "tweet": " Commit your code in small working chunks and write detailed commit messages that will help developers find and understand bugs that may have been introduced in that commit. #100DaysOfCode #coding"
  },
  {
    "tweet": "Have large chunks of time set aside for focused coding each day. The quantity of time spent coding is meaningless if it’s full of interruptions such as meetings, emails and web browsing. #100DaysOfCode #coding"
  },
  {
    "tweet": "Googling is a crucial developer skill. Learn how to do something you haven’t done before and find optimal solutions from the collective intelligence of the developer community. #100DaysOfCode #coding"
  },
  {
    "tweet": "Teach. Even if you’re a novice at programming you’re knowledgeable about something. Teaching teaches the teacher. #100DaysOfCode #coding"
  },
  {
    "tweet": "Look for existing solutions. Most of the time every problem you are struggling with is a problem that thousands of people have already faced and probably solved.  #100DaysOfCode #coding"
  },
  {
    "tweet": "Read read & read. The more you read the more you learn. You obviously need to practise but good books give you a solid base! #100DaysOfCode #coding"
  },
  {
    "tweet": "To be competitive stay updated. Know about new trends in your industry. The world is changing at a very fast rhythm and almost every day you hear about awesome innovations #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t forget to live. A code marathon isn’t going to make you healthy and productive”. Don’t forget about your personal life! Disconnect go out, do sports, spend time in nature without any devices etc. #100DaysOfCode #coding"
  },
  {
    "tweet": "Before you start coding take the time to jot down the general structure of the feature/problem you will be working on. This will make code implementation a much smoother process and will help you see potential pitfalls. #100DaysOfCode #coding"
  },
  {
    "tweet": "Things change very quickly in the software industry. If you want to stay relevant as a programmer you have to keep learning new things. #100DaysOfCode #coding"
  },
  {
    "tweet": "Don't Try To Learn Everything - Although it's important to be constantly picking up on new things you only have so many hours in your day. So be selective of what you spend your time trying to learn. #100DaysOfCode #coding"
  },
  {
    "tweet": "You might think you're all set once you know C++ Java or Python. Yet being a great developer requires a wide range of softer skills too – like being able to empathise. After all, you’ll still be working with humans.  #100DaysOfCode #coding"
  },
  {
    "tweet": "Under promise and over-deliver. It is better to let your team know a task will take three weeks and deliver in two rather than the other way around. By under-promising and over-delivering you'll build trust. #100DaysOfCode #coding"
  },
  {
    "tweet": "YAGNI: You Aint Gonna Need It. Don't write code that you think you might need in future but don't need yet. This is coding for imaginary future use cases and inevitably the code will become dead code. #100DaysOfCode #coding"
  },
  {
    "tweet": "Write defensively. Always think about what can go wrong, what will happen on invalid input and what might fail. This will help you catch many bugs before they happen. #100DaysOfCode #coding"
  },
  {
    "tweet": "The third time you write the same piece of code is the right time to extract it into a general-purpose helper (and write tests for it). Remember (DRY) - Don't repeat yourself #100DaysOfCode #coding"
  },
  {
    "tweet": "Contribute to open-source projects as a bridge from beginner to intermediate. Collaborate with the developers of the project and attend meetups to collaborate with other developers in person. #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t let anything get in the way of that initial motivation to learn programming and just build something. Sometimes you block yourself by having too much focus on reading books or resources first #100DaysOfCode #coding"
  },
  {
    "tweet": "Learning programming languages is NOT learning how to program. Focus on programming techniques problem solving and analytical skills #100DaysOfCode #coding"
  },
  {
    "tweet": "Learn the most important libraries for your chosen programming language. The more libraries you’re aware of the less likely you are to try reinventing the wheel. #100DaysOfCode #coding"
  },
  {
    "tweet": "Make common programs that have been made before as a learning project. If other developers can make a calculator, To-do list, text editor, Tetris or Pong then so can you. #100DaysOfCode #coding"
  },
  {
    "tweet": "Always write code as if the person who ends up maintaining it will be a violent psychopath who knows where you live. #100DaysOfCode #coding"
  },
  {
    "tweet": "Name variables so that other developers can understand your code better. This is a skill you need to nurture. #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t use design patterns like a hammer looking for a nail. If you don’t have a clear reason you need it don’t use it. #100DaysOfCode #coding"
  },
  {
    "tweet": "Reusable code is helpful and important but trying to write overgeneralised super flexible code is often a waste of time. This kind of code is usually harder to maintain and causes bugs. #100DaysOfCode #coding"
  },
  {
    "tweet": "Master the art of debugging using print statements. There are many scenarios where a sophisticated debugger is not available to you  #100DaysOfCode #coding"
  },
  {
    "tweet": "Know when to take on technical debt and when to pay it off so it doesn’t compound. #100DaysOfCode #coding"
  },
  {
    "tweet": "Within the context of your projects learn what the right amount of testing is. Too little and your software becomes unreliable and everyone is afraid to deploy to production. Too much and you’ll end up wasting too much time. #100DaysOfCode #coding"
  },
  {
    "tweet": " Estimating time is hard. This is why iterative development methods such as Scrum are so popular. Push yourself and your team to have increasingly shorter release cycles. #100DaysOfCode #coding"
  },
  {
    "tweet": "It's not at all important to get it right the first time. It's vitally important to get it right the last time.” #100DaysOfCode #coding"
  },
  {
    "tweet": "You won’t get anywhere if you just sit on your ass and lament that you suck at coding. Asides from following tutorials you should work on your own projects. #100DaysOfCode #coding"
  },
  {
    "tweet": "Becoming a good programmer takes a long long time and a lot of tedious evenings. Be patient and you shall bear the fruits of your labour #100DaysOfCode #coding"
  },
  {
    "tweet": "Learn by doing. Always play with the code while learning - With every new subject the sooner you start playing with the code the faster you will learn the given concepts. #100DaysOfCode #coding"
  },
  {
    "tweet": "As elementary as they may appear at first programming fundamentals always need to come first: the better you understand them the easier it is to learn more advanced concepts. #100DaysOfCode #coding"
  },
  {
    "tweet": "As awesome as it would be to become the next Steve Jobs on your own the reality is that people learn faster with mentors and peer feedback.  #100DaysOfCode #coding"
  },
  {
    "tweet": "Consistency is very important when you are learning a new language. Make a commitment to coding everyday.  #100DaysOfCode #coding"
  },
  {
    "tweet": "As you progress on your journey as a new programmer you may wonder if you should be taking notes. Yes you should! Taking notes by hand is best for long-term retention. #100DaysOfCode #coding"
  },
  {
    "tweet": "Be aware that the only constant in the tech (& programming) world is change: be open to it, accept it and dont look at it as some serious inconvenience to be fought! #100DaysOfCode #coding"
  },
  {
    "tweet": "Take pride in what you build but be ready to have it replaced by someone or even yourself. Don't attach ego to your code. #100DaysOfCode #coding"
  },
  {
    "tweet": "Programming can also one of the most frustrating things you will ever do. Feeling frustrated is completely normal and will probably never completely go away. #100DaysOfCode #coding"
  },
  {
    "tweet": "Jump into networking with other local people in the industry as soon as you can. Those connections will grow with you and be invaluable. #100DaysOfCode #coding"
  },
  {
    "tweet": "One of the best programming skills you can have is knowing when to walk away for a while. #100DaysOfCode #coding"
  },
  {
    "tweet": "Comments are crucial. You won’t appreciate them until you leave your thousand-line script for a couple of days and return to and try and make sense of it. Useful comments make life easier for yourself and others who have to maintain your code. #100DaysOfCode #coding"
  },
  {
    "tweet": "Global variables and loops are a mess and can prove problematic when your application grows to millions of lines of code (which most do!). They may influence code elsewhere that is difficult to discern. Think twice before using globals. !#100DaysOfCode #coding"
  },
  {
    "tweet": "Learn how to learn - Everyone learns best in different ways. Some learn best from reading books and others like following video tutorials. If you figure out your learning style and use it, you'll have a much easier time learning new things. #100DaysOfCode #coding"
  },
  {
    "tweet": "Codes are a puzzle. A game just like any other game. - Alan Turing #100DaysOfCode #coding"
  },
  {
    "tweet": "Make your code easy to read and understand. This makes it easier for other people (including, your future self after you’ve forgotten how your code works) to figure out what your code is doing, modify it as need be, and debug it. #100DaysOfCode #coding"
  },
  {
    "tweet": "Inevitably, code comments become lies over time. In practice, few people update comments when things change. Strive to make your code readable and self-documenting through good naming practices and known programming style. #100DaysOfCode #coding"
  },
  {
    "tweet": "Rushing any task usually ends up in disasters of the worst kind. Coding is a process that takes time. Software projects often involve the completion of a number of critical sub-tasks which cannot be messed up. Be patient. #100DaysOfCode #coding"
  },
  {
    "tweet": "If software cannot be maintained then it will be rewritten – Dave Cheney #100DaysOfCode #coding"
  },
  {
    "tweet": "The digital revolution is far more significant than the invention of writing or even of printing. – Douglas Engelbart #100DaysOfCode #coding"
  },
  {
    "tweet": "Software being Done is like lawn being Mowed. - Jim Benson #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t be afraid to look at somebody else’s code and try to understand it.  If you're on a project with senior talent, this is a great opportunity to take advantage of!  Don’t be afraid to ask about things you don’t understand in their code. #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t Sell Yourself Short - These days, if you work in tech you’re a scarce resource. Being aware of this & more importantly being able to use this will give you better career opportunities and will ultimately result in better self-confidence. #100DaysOfCode #coding"
  },
  {
    "tweet": "in order to stay relevant, it’s mandatory for every developer to keep learning new technologies, programming languages, frameworks, techniques, best practices and skills #100DaysOfCode #coding"
  },
  {
    "tweet": "I love doing side projects even if I’m in a permanent role. Side projects allow you to learn new things, they're great for your CV and most importantly keep your skills up-to-date. #100DaysOfCode #coding"
  },
  {
    "tweet": "Having a profile on LinkedIn will give you exposure to recruiters, potential employers, and like-minded people. It will help you present your skills, connect with other people and find new job opportunities. #100DaysOfCode #coding"
  },
  {
    "tweet": "Whether you’re just starting your career as a software developer or have 10+ years experience, if you don’t know something, ASK! Nobody knows everything. Nobody can know everything. The software industry constantly changes at a furious speed! #100DaysOfCode #coding"
  },

  {
    "tweet": "The technology industry is one of the most intense industries and it can be overwhelming to jump into. Remember that everyone, at some point in their careers, started where you did. All of the industry leaders in tech were once beginners.  #100DaysOfCode #coding"
  },

  {
    "tweet": "If you want to start programming, there has to be a reason for it. Whether you love writing code, you're seeking a more lucrative career, or you are doing some Excel work and you want to automate it. Keep track of that reason as coding is hard. #100DaysOfCode #coding"
  },

  {
    "tweet": "Find a community to support you as you start writing code. This community will be valuable because other people will be in the same place as you, offering resources that helped them and encouragement. Network on Social Media or find a Meetup group. #100DaysOfCode #coding"
  },

  {
    "tweet": "An important part of programming is taking a large problem and breaking it into smaller solvable pieces. If you are looking at a blank text editor not knowing where to start, it may be because you haven't broken down the problem enough! #100DaysOfCode #coding"
  },

  {
    "tweet": "Related to the previous tip, a lot of times it is beneficial to write down in detail what you are trying to do in plain words before even trying to write code. This process is called pseudocoding, and it can take whatever form you want it to. #100DaysOfCode #coding"
  },

  {
    "tweet": "If you've been away from the classroom for a while, learning how to learn is going to be a big part of your process. There are lots of ups and downs involved, which is natural! I would brace yourself for that rollercoaster before starting out. #100DaysOfCode #coding"
  },

  {
    "tweet": "There are a million and one resources for learning how to code. Some are free, and some are paid. I would start with the free resources, make sure you like writing code, then, you could think about moving onto paid resources or even a bootcamp. #100DaysOfCode #coding"
  },

  {
    "tweet": "There are a lot of worlds within programming, find one world that you love and focus on that. Instead of trying to learn 8 programming languages. #100DaysOfCode #coding"
  },

  {
    "tweet": "It will be easier to write clean code in the future if you get into the habit early. Bad habits can be hard to break #100DaysOfCode #coding"
  },
  {
    "tweet": "Error messages are super helpful, but when you are starting out that red error message can be terrifying! One huge step to take is to read through those messages, understand them, and then use them to solve the problem. #100DaysOfCode #coding"
  },
  {
    "tweet": "There isn't a right answer for what programming language to learn first; however, some will be easier to pick up. My top two are Python and JavaScript because they have a large community behind them and the syntax is relative straight-forward.#100DaysOfCode #coding"
  },
  {
    "tweet": "The fundamentals of programming are invaluable, and you will use them no matter what you end up doing. Focus on having a solid knowledge of loops, conditionals, functions, data types, and (in most languages) OOP. #100DaysOfCode #coding"
  },

  {
    "tweet": "What one programmer can do in one month two programmers can do in two months. - Fred Brooks #100DaysOfCode #coding"
  },
  {
    "tweet": "If it doesn’t work it doesn’t matter how fast it doesn’t work. - Mich Ravera #100DaysOfCode #coding"
  },
  {
    "tweet": "The amount of sleep that you get has a larger impact on your effectiveness than the programming language you use. – Wesley Aptekar-Cassels #100DaysOfCode #coding"
  },
  {
    "tweet": "People have an enormous tendency to resist change. They love to say We've always done it this way. I try to fight that.” - Grace Hopper #100DaysOfCode #coding"
  },
  {
    "tweet": "An evolving system increases its complexity unless work is done to reduce it. - Meir Lehman #100DaysOfCode #coding"
  },
  {
    "tweet": "The good news about computers is that they do what you tell them to do. The bad news is that they do what you tell them to do. - Ted Nelson #100DaysOfCode #coding"
  },
  {
    "tweet": "It turns out that style matters in programming for the same reason that it matters in writing. It makes for better reading. - Douglas Crockford #100DaysOfCode #coding"
  },
  {
    "tweet": "There’s a big difference between making a simple product & making a product simple.” - Des Traynor #100DaysOfCode #coding"
  },
  {
    "tweet": "A good programmer is someone who always looks both ways before crossing a one-way street. — Doug Linder #100DaysOfCode #coding"
  },
  {
    "tweet": "You’re building your own maze in a way and you might just get lost in it.” - Marijn Haverbeke Eloquent JavaScript: A Modern Introduction to Programming #100DaysOfCode #coding"
  },
  {
    "tweet": "Programming is like pinball. The reward for doing it is the opportunity of doing it again. - Unknown #100DaysOfCode #coding"
  },
  {
    "tweet": "It's not a bug - it's an undocumented feature. #100DaysOfCode #coding"
  },
  {
    "tweet": "Software is never finished only abandoned. #100DaysOfCode #coding"
  },
  {
    "tweet": "The most valuable thing you can make is a mistake - you can't learn anything from being perfect. - Adam Osborne #100DaysOfCode #coding"
  },
  {
    "tweet": "There’s a very strong element of excitement of being able to share what you’ve learned with the next generation.” - Larry Tesler #100DaysOfCode #coding"
  },
  {
    "tweet": "The best programmers can take a complex problem break it down into smaller pieces, solve each of those pieces and then put everything back together to solve the initial problem. #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t let one domain pigeonhole you into one way of coding. An example would be a mobile developer who is mainly good at hooking together existing APIs but can't come up with a sane data representation. Don’t be a one-trick pony. #100DaysOfCode #coding"
  },
  {
    "tweet": "Plan your code away from the computer. It will help you build a clear mental model before you start. You use the same strategy in writing because if you don’t have an outline your content becomes a messy stream of consciousness. #100DaysOfCode #coding"
  },
  {
    "tweet": "When you're stuck write your program on paper. I'm serious. It's magic. (I think it works because when you don't have to think about syntax you have more excess brainpower to solve the actual problem.)” - Joseph Gentle #100DaysOfCode #coding"
  },
  {
    "tweet": "Contribute to open-source projects as a bridge from beginner to intermediate. Collaborate with the developers of the project and attend meetups to collaborate with other developers in person.#100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t let anything get in the way of that initial motivation to learn programming and just build something. Sometimes you block yourself by having too much focus on reading books or resources first. #100DaysOfCode #coding"
  },
  {
    "tweet": "Beginners will try to find the perfect first language. Your first language doesn’t matter. What matters is learning to program well. Just start coding #100DaysOfCode #coding"
  },
  {
    "tweet": "Learning programming languages is NOT learning how to program. Focus on programming techniques, problem-solving and analytical skills not on learning as many languages as you can. #100DaysOfCode #coding"
  },
  {
    "tweet": "If you're committed to learning a programming language. Learn the most important libraries for your use cases. The more libraries you’re aware of the less likely you are to try reinventing the wheel. #100DaysOfCode #coding"
  },
  {
    "tweet": "Automation is key create some of your own tools. (But of course, if you're going to use it in production make sure it's not another wheel reinvention.) #100DaysOfCode #coding"
  },
  {
    "tweet": "Always write code as if the person who ends up maintaining it will be a violent psychopath who knows where you live. #100DaysOfCode #coding"
  },
  {
    "tweet": "Name variables so that other developers can understand your code better. This is a skill you need to nurture. #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t use design patterns like a hammer looking for a nail. If you don’t have a clear reason you need it don’t use it. #100DaysOfCode #coding"
  },
  {
    "tweet": "Reusable code is helpful and important but trying to write overgeneralised super flexible code is often a waste of time. This kind of code is usually harder to maintain and causes bugs. #100DaysOfCode #coding"
  },
  {
    "tweet": " Commit your code in small working chunks and write detailed commit messages that will help developers find and understand bugs that may have been introduced in that commit. #100DaysOfCode #coding"
  },
  {
    "tweet": "Have large chunks of time set aside for focused coding each day. The quantity of time spent coding is meaningless if it’s full of interruptions such as meetings, emails and web browsing. #100DaysOfCode #coding"
  },
  {
    "tweet": "Googling is a crucial developer skill. Learn how to do something you haven’t done before and find optimal solutions from the collective intelligence of the developer community. #100DaysOfCode #coding"
  },
  {
    "tweet": "Teach. Even if you’re a novice at programming you’re knowledgeable about something. Teaching teaches the teacher. #100DaysOfCode #coding"
  },
  {
    "tweet": "Look for existing solutions. Most of the time every problem you are struggling with is a problem that thousands of people have already faced and probably solved.  #100DaysOfCode #coding"
  },
  {
    "tweet": "Read read & read. The more you read the more you learn. You obviously need to practise but good books give you a solid base! #100DaysOfCode #coding"
  },
  {
    "tweet": "To be competitive stay updated. Know about new trends in your industry. The world is changing at a very fast rhythm and almost every day you hear about awesome innovations #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t forget to live. A code marathon isn’t going to make you healthy and productive”. Don’t forget about your personal life! Disconnect go out, do sports, spend time in nature without any devices etc. #100DaysOfCode #coding"
  },
  {
    "tweet": "Before you start coding take the time to jot down the general structure of the feature/problem you will be working on. This will make code implementation a much smoother process and will help you see potential pitfalls. #100DaysOfCode #coding"
  },
  {
    "tweet": "Things change very quickly in the software industry. If you want to stay relevant as a programmer you have to keep learning new things. #100DaysOfCode #coding"
  },
  {
    "tweet": "Don't Try To Learn Everything - Although it's important to be constantly picking up on new things you only have so many hours in your day. So be selective of what you spend your time trying to learn. #100DaysOfCode #coding"
  },
  {
    "tweet": "You might think you're all set once you know C++ Java or Python. Yet being a great developer requires a wide range of softer skills too – like being able to empathise. After all, you’ll still be working with humans.  #100DaysOfCode #coding"
  },
  {
    "tweet": "Under promise and over-deliver. It is better to let your team know a task will take three weeks and deliver in two rather than the other way around. By under-promising and over-delivering you'll build trust. #100DaysOfCode #coding"
  },
  {
    "tweet": "YAGNI: You Aint Gonna Need It. Don't write code that you think you might need in future but don't need yet. This is coding for imaginary future use cases and inevitably the code will become dead code. #100DaysOfCode #coding"
  },
  {
    "tweet": "Write defensively. Always think about what can go wrong, what will happen on invalid input and what might fail. This will help you catch many bugs before they happen. #100DaysOfCode #coding"
  },
  {
    "tweet": "The third time you write the same piece of code is the right time to extract it into a general-purpose helper (and write tests for it). Remember (DRY) - Don't repeat yourself #100DaysOfCode #coding"
  },
  {
    "tweet": "Contribute to open-source projects as a bridge from beginner to intermediate. Collaborate with the developers of the project and attend meetups to collaborate with other developers in person. #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t let anything get in the way of that initial motivation to learn programming and just build something. Sometimes you block yourself by having too much focus on reading books or resources first #100DaysOfCode #coding"
  },
  {
    "tweet": "Learning programming languages is NOT learning how to program. Focus on programming techniques problem solving and analytical skills #100DaysOfCode #coding"
  },
  {
    "tweet": "Learn the most important libraries for your chosen programming language. The more libraries you’re aware of the less likely you are to try reinventing the wheel. #100DaysOfCode #coding"
  },
  {
    "tweet": "Make common programs that have been made before as a learning project. If other developers can make a calculator, To-do list, text editor, Tetris or Pong then so can you. #100DaysOfCode #coding"
  },
  {
    "tweet": "Always write code as if the person who ends up maintaining it will be a violent psychopath who knows where you live. #100DaysOfCode #coding"
  },
  {
    "tweet": "Name variables so that other developers can understand your code better. This is a skill you need to nurture. #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t use design patterns like a hammer looking for a nail. If you don’t have a clear reason you need it don’t use it. #100DaysOfCode #coding"
  },
  {
    "tweet": "Reusable code is helpful and important but trying to write overgeneralised super flexible code is often a waste of time. This kind of code is usually harder to maintain and causes bugs. #100DaysOfCode #coding"
  },
  {
    "tweet": "Master the art of debugging using print statements. There are many scenarios where a sophisticated debugger is not available to you  #100DaysOfCode #coding"
  },
  {
    "tweet": "Know when to take on technical debt and when to pay it off so it doesn’t compound. #100DaysOfCode #coding"
  },
  {
    "tweet": "Within the context of your projects learn what the right amount of testing is. Too little and your software becomes unreliable and everyone is afraid to deploy to production. Too much and you’ll end up wasting too much time. #100DaysOfCode #coding"
  },
  {
    "tweet": " Estimating time is hard. This is why iterative development methods such as Scrum are so popular. Push yourself and your team to have increasingly shorter release cycles. #100DaysOfCode #coding"
  },
  {
    "tweet": "It's not at all important to get it right the first time. It's vitally important to get it right the last time.” #100DaysOfCode #coding"
  },
  {
    "tweet": "You won’t get anywhere if you just sit on your ass and lament that you suck at coding. Asides from following tutorials you should work on your own projects. #100DaysOfCode #coding"
  },
  {
    "tweet": "Becoming a good programmer takes a long long time and a lot of tedious evenings. Be patient and you shall bear the fruits of your labour #100DaysOfCode #coding"
  },
  {
    "tweet": "Learn by doing. Always play with the code while learning - With every new subject the sooner you start playing with the code the faster you will learn the given concepts. #100DaysOfCode #coding"
  },
  {
    "tweet": "As elementary as they may appear at first programming fundamentals always need to come first: the better you understand them the easier it is to learn more advanced concepts. #100DaysOfCode #coding"
  },
  {
    "tweet": "As awesome as it would be to become the next Steve Jobs on your own the reality is that people learn faster with mentors and peer feedback.  #100DaysOfCode #coding"
  },
  {
    "tweet": "Consistency is very important when you are learning a new language. Make a commitment to coding everyday.  #100DaysOfCode #coding"
  },
  {
    "tweet": "As you progress on your journey as a new programmer you may wonder if you should be taking notes. Yes you should! Taking notes by hand is best for long-term retention. #100DaysOfCode #coding"
  },
  {
    "tweet": "Be aware that the only constant in the tech (& programming) world is change: be open to it, accept it and dont look at it as some serious inconvenience to be fought! #100DaysOfCode #coding"
  },
  {
    "tweet": "Take pride in what you build but be ready to have it replaced by someone or even yourself. Don't attach ego to your code. #100DaysOfCode #coding"
  },
  {
    "tweet": "Programming can also one of the most frustrating things you will ever do. Feeling frustrated is completely normal and will probably never completely go away. #100DaysOfCode #coding"
  },
  {
    "tweet": "Jump into networking with other local people in the industry as soon as you can. Those connections will grow with you and be invaluable. #100DaysOfCode #coding"
  },
  {
    "tweet": "One of the best programming skills you can have is knowing when to walk away for a while. #100DaysOfCode #coding"
  },
  {
    "tweet": "Comments are crucial. You won’t appreciate them until you leave your thousand-line script for a couple of days and return to and try and make sense of it. Useful comments make life easier for yourself and others who have to maintain your code. #100DaysOfCode #coding"
  },
  {
    "tweet": "Global variables and loops are a mess and can prove problematic when your application grows to millions of lines of code (which most do!). They may influence code elsewhere that is difficult to discern. Think twice before using globals. !#100DaysOfCode #coding"
  },
  {
    "tweet": "Learn how to learn - Everyone learns best in different ways. Some learn best from reading books and others like following video tutorials. If you figure out your learning style and use it, you'll have a much easier time learning new things. #100DaysOfCode #coding"
  },
  {
    "tweet": "Codes are a puzzle. A game just like any other game. - Alan Turing #100DaysOfCode #coding"
  },
  {
    "tweet": "Make your code easy to read and understand. This makes it easier for other people (including, your future self after you’ve forgotten how your code works) to figure out what your code is doing, modify it as need be, and debug it. #100DaysOfCode #coding"
  },
  {
    "tweet": "Inevitably, code comments become lies over time. In practice, few people update comments when things change. Strive to make your code readable and self-documenting through good naming practices and known programming style. #100DaysOfCode #coding"
  },
  {
    "tweet": "Rushing any task usually ends up in disasters of the worst kind. Coding is a process that takes time. Software projects often involve the completion of a number of critical sub-tasks which cannot be messed up. Be patient. #100DaysOfCode #coding"
  },
  {
    "tweet": "If software cannot be maintained then it will be rewritten – Dave Cheney #100DaysOfCode #coding"
  },
  {
    "tweet": "The digital revolution is far more significant than the invention of writing or even of printing. – Douglas Engelbart #100DaysOfCode #coding"
  },
  {
    "tweet": "Software being Done is like lawn being Mowed. - Jim Benson #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t be afraid to look at somebody else’s code and try to understand it.  If you're on a project with senior talent, this is a great opportunity to take advantage of!  Don’t be afraid to ask about things you don’t understand in their code. #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t Sell Yourself Short - These days, if you work in tech you’re a scarce resource. Being aware of this & more importantly being able to use this will give you better career opportunities and will ultimately result in better self-confidence. #100DaysOfCode #coding"
  },
  {
    "tweet": "in order to stay relevant, it’s mandatory for every developer to keep learning new technologies, programming languages, frameworks, techniques, best practices and skills #100DaysOfCode #coding"
  },
  {
    "tweet": "I love doing side projects even if I’m in a permanent role. Side projects allow you to learn new things, they're great for your CV and most importantly keep your skills up-to-date. #100DaysOfCode #coding"
  },
  {
    "tweet": "Having a profile on LinkedIn will give you exposure to recruiters, potential employers, and like-minded people. It will help you present your skills, connect with other people and find new job opportunities. #100DaysOfCode #coding"
  },
  {
    "tweet": "Whether you’re just starting your career as a software developer or have 10+ years experience, if you don’t know something, ASK! Nobody knows everything. Nobody can know everything. The software industry constantly changes at a furious speed! #100DaysOfCode #coding"
  },

  {
    "tweet": "The technology industry is one of the most intense industries and it can be overwhelming to jump into. Remember that everyone, at some point in their careers, started where you did. All of the industry leaders in tech were once beginners.  #100DaysOfCode #coding"
  },

  {
    "tweet": "If you want to start programming, there has to be a reason for it. Whether you love writing code, you're seeking a more lucrative career, or you are doing some Excel work and you want to automate it. Keep track of that reason as coding is hard. #100DaysOfCode #coding"
  },

  {
    "tweet": "Find a community to support you as you start writing code. This community will be valuable because other people will be in the same place as you, offering resources that helped them and encouragement. Network on Social Media or find a Meetup group. #100DaysOfCode #coding"
  },

  {
    "tweet": "An important part of programming is taking a large problem and breaking it into smaller solvable pieces. If you are looking at a blank text editor not knowing where to start, it may be because you haven't broken down the problem enough! #100DaysOfCode #coding"
  },

  {
    "tweet": "Related to the previous tip, a lot of times it is beneficial to write down in detail what you are trying to do in plain words before even trying to write code. This process is called pseudocoding, and it can take whatever form you want it to. #100DaysOfCode #coding"
  },

  {
    "tweet": "If you've been away from the classroom for a while, learning how to learn is going to be a big part of your process. There are lots of ups and downs involved, which is natural! I would brace yourself for that rollercoaster before starting out. #100DaysOfCode #coding"
  },

  {
    "tweet": "There are a million and one resources for learning how to code. Some are free, and some are paid. I would start with the free resources, make sure you like writing code, then, you could think about moving onto paid resources or even a bootcamp. #100DaysOfCode #coding"
  },

  {
    "tweet": "There are a lot of worlds within programming, find one world that you love and focus on that. Instead of trying to learn 8 programming languages. #100DaysOfCode #coding"
  },

  {
    "tweet": "It will be easier to write clean code in the future if you get into the habit early. Bad habits can be hard to break #100DaysOfCode #coding"
  },
  {
    "tweet": "Error messages are super helpful, but when you are starting out that red error message can be terrifying! One huge step to take is to read through those messages, understand them, and then use them to solve the problem. #100DaysOfCode #coding"
  },
  {
    "tweet": "There isn't a right answer for what programming language to learn first; however, some will be easier to pick up. My top two are Python and JavaScript because they have a large community behind them and the syntax is relative straight-forward.#100DaysOfCode #coding"
  },
  {
    "tweet": "The fundamentals of programming are invaluable, and you will use them no matter what you end up doing. Focus on having a solid knowledge of loops, conditionals, functions, data types, and (in most languages) OOP. #100DaysOfCode #coding"
  },

  {
    "tweet": "What one programmer can do in one month two programmers can do in two months. - Fred Brooks #100DaysOfCode #coding"
  },
  {
    "tweet": "If it doesn’t work it doesn’t matter how fast it doesn’t work. - Mich Ravera #100DaysOfCode #coding"
  },
  {
    "tweet": "The amount of sleep that you get has a larger impact on your effectiveness than the programming language you use. – Wesley Aptekar-Cassels #100DaysOfCode #coding"
  },
  {
    "tweet": "People have an enormous tendency to resist change. They love to say We've always done it this way. I try to fight that.” - Grace Hopper #100DaysOfCode #coding"
  },
  {
    "tweet": "An evolving system increases its complexity unless work is done to reduce it. - Meir Lehman #100DaysOfCode #coding"
  },
  {
    "tweet": "The good news about computers is that they do what you tell them to do. The bad news is that they do what you tell them to do. - Ted Nelson #100DaysOfCode #coding"
  },
  {
    "tweet": "It turns out that style matters in programming for the same reason that it matters in writing. It makes for better reading. - Douglas Crockford #100DaysOfCode #coding"
  },
  {
    "tweet": "There’s a big difference between making a simple product & making a product simple.” - Des Traynor #100DaysOfCode #coding"
  },
  {
    "tweet": "A good programmer is someone who always looks both ways before crossing a one-way street. — Doug Linder #100DaysOfCode #coding"
  },
  {
    "tweet": "You’re building your own maze in a way and you might just get lost in it.” - Marijn Haverbeke Eloquent JavaScript: A Modern Introduction to Programming #100DaysOfCode #coding"
  },
  {
    "tweet": "Programming is like pinball. The reward for doing it is the opportunity of doing it again. - Unknown #100DaysOfCode #coding"
  },
  {
    "tweet": "It's not a bug - it's an undocumented feature. #100DaysOfCode #coding"
  },
  {
    "tweet": "Software is never finished only abandoned. #100DaysOfCode #coding"
  },
  {
    "tweet": "The most valuable thing you can make is a mistake - you can't learn anything from being perfect. - Adam Osborne #100DaysOfCode #coding"
  },
  {
    "tweet": "There’s a very strong element of excitement of being able to share what you’ve learned with the next generation.” - Larry Tesler #100DaysOfCode #coding"
  },
  {
    "tweet": "The best programmers can take a complex problem break it down into smaller pieces, solve each of those pieces and then put everything back together to solve the initial problem. #100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t let one domain pigeonhole you into one way of coding. An example would be a mobile developer who is mainly good at hooking together existing APIs but can't come up with a sane data representation. Don’t be a one-trick pony. #100DaysOfCode #coding"
  },
  {
    "tweet": "Plan your code away from the computer. It will help you build a clear mental model before you start. You use the same strategy in writing because if you don’t have an outline your content becomes a messy stream of consciousness. #100DaysOfCode #coding"
  },
  {
    "tweet": "When you're stuck write your program on paper. I'm serious. It's magic. (I think it works because when you don't have to think about syntax you have more excess brainpower to solve the actual problem.)” - Joseph Gentle #100DaysOfCode #coding"
  },
  {
    "tweet": "Contribute to open-source projects as a bridge from beginner to intermediate. Collaborate with the developers of the project and attend meetups to collaborate with other developers in person.#100DaysOfCode #coding"
  },
  {
    "tweet": "Don’t let anything get in the way of that initial motivation to learn programming and just build something. Sometimes you block yourself by having too much focus on reading books or resources first. #100DaysOfCode #coding"
  }
]
